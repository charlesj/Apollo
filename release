#!/usr/bin/env bash
set -e

PUBLISH_DIR=apollo
RELEASE_DIR=releases

# cannot release with uncommitted changes
CHANGED=$(git diff-index --name-only HEAD --)
if [ ! -z $CHANGED ]; then
    echo "Cannot create release with uncommitted changes.  A new commit will be made as part of the release."
    exit 1
fi

APOLLO_VERSION=$(./increment_release)
export APOLLO_VERSION

git commit -am "Creating release $APOLLO_VERSION"
TARBALL=apollo.$APOLLO_VERSION.tar.gz

LATEST_VERSION_POINTER=apollo.latest.tar.gz

# clean things from previous if needed.
if [ -d "$PUBLISH_DIR" ]; then
    rm -rf "$PUBLISH_DIR"
fi

if [ -f "$TARBALL" ]; then
    rm -f "$TARBALL"
fi

mkdir "$PUBLISH_DIR"

if [ ! -d "$RELEASE_DIR" ]; then
    mkdir "$RELEASE_DIR"
fi

# Set Server Version Information
# Set Version Information
cp server/Apollo/Version_Template.cs server/Apollo/Version.cs
sed -i "s/%%version%%/$APOLLO_VERSION/g" server/Apollo/Version.cs
sed -i "s/%%commitHash%%/$(git rev-parse HEAD)/g" server/Apollo/Version.cs
sed -i "s/%%compiledOn%%/$(date -u +"%Y-%m-%dT%H:%M:%SZ")/g" server/Apollo/Version.cs

# build server
# clean first
rm -rf ./server/Apollo/bin/Release

pushd server
./build deploy
popd

mv ./server/Apollo/bin/Release "$PUBLISH_DIR"/server

# build client
pushd client
yarn build
popd

mv ./client/build "$PUBLISH_DIR"/client

# include database
pushd database
git clean -xdf
popd
cp -r ./database "$PUBLISH_DIR"/database

# tarball
tar -zcvf "$TARBALL" "$PUBLISH_DIR"
mv "$TARBALL" "$RELEASE_DIR/"


pushd releases
if [ -L "$LATEST_VERSION_POINTER" ]; then
    rm "$LATEST_VERSION_POINTER"
fi

ln -s "$TARBALL" "$LATEST_VERSION_POINTER"
popd
